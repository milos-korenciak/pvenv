
# This file must be used with "source Scripts/activate" OR ". Scripts/activate"
# *from bash / zsh / sh * . You SHOULD NOT run it in subprocess
# (e.g. "bash Scripts/activate").
# This file allows PVenv tools preceding the system ones after activation. This
# can lead to clashes. E.g.: nuitka inside PVenv along system-wide Intel C
# Compiler installation.

# --->   Consider running 'activate-isolated' conterpart for PRODUCTION.   <---


if [ "${BASH_SOURCE-}" = "$0" ]; then
    echo "You must source this script: \$ source $0" >&2
    exit 33
fi

update_conda () {
    # updates the conda environment
    python -m conda update --prefix "$VIRTUAL_ENV" conda
}

update_python () {
    # updates the conda environment
    python -m conda update --prefix "$VIRTUAL_ENV" python
}

deactivate () {
    unset -f pydoc >/dev/null 2>&1

    # reset old environment variables
    # ! [ -z ${VAR+_} ] returns true if VAR is declared at all
    if ! [ -z "${_OLD_VIRTUAL_PATH:+_}" ] ; then
        PATH="$_OLD_VIRTUAL_PATH"
        export PATH
        unset _OLD_VIRTUAL_PATH
    fi
    if ! [ -z "${_OLD_VIRTUAL_PYTHONHOME+_}" ] ; then
        PYTHONHOME="$_OLD_VIRTUAL_PYTHONHOME"
        export PYTHONHOME
        unset _OLD_VIRTUAL_PYTHONHOME
    fi

    # This should detect bash and zsh, which have a hash command that must
    # be called to get it to forget past commands.  Without forgetting
    # past commands the $PATH changes we made may not be respected
    if [ -n "${BASH-}" ] || [ -n "${ZSH_VERSION-}" ] ; then
        hash -r 2>/dev/null
    fi

    if ! [ -z "${_OLD_VIRTUAL_PS1+_}" ] ; then
        PS1="$_OLD_VIRTUAL_PS1"
        export PS1
        unset _OLD_VIRTUAL_PS1
    fi

    unset VIRTUAL_ENV
    if [ ! "${1-}" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate
    fi
}

# unset irrelevant variables
deactivate nondestructive


# TODO: if empty, get alchemy from $0
if [ -n "$BASH_VERSION" ] ; then
#     echo "BASH interpreter BASH_SOURCE $BASH_SOURCE 0 $0 "
    VIRTUAL_ENV="$( cd "$(dirname "$BASH_SOURCE")/.." ; pwd -P )"
#     echo "VIRTUAL_ENV $VIRTUAL_ENV "
elif [ -n "$ZSH_VERSION" ] ; then
#     echo "ZSH interpreter BASH_SOURCE $BASH_SOURCE 0 $0 "
    SCRIPT_PATH=$0
    VIRTUAL_ENV="$( cd "$(dirname "$SCRIPT_PATH")/.." ; pwd -P )"
#     echo "VIRTUAL_ENV $VIRTUAL_ENV "
else
    echo "Not supported shell!"
fi


# if non-existing _OLD_VIRTUAL_PATH env variable, set it
if ! [ -z "${_OLD_VIRTUAL_PATH:+_}" ] ; then
    export _OLD_VIRTUAL_PATH="$PATH"
    echo "_OLD_VIRTUAL_PATH: $_OLD_VIRTUAL_PATH"
fi

# ! Set new PATH. Precede PVenv over system !
# Note possible clashes of subprogramms.
PATH="$VIRTUAL_ENV/bin:$PATH"
export PATH

# unset PYTHONHOME if set
if ! [ -z "${PYTHONHOME+_}" ] ; then
    _OLD_VIRTUAL_PYTHONHOME="$PYTHONHOME"
    unset PYTHONHOME
fi

PYTHON_VERSION=$(python -c 'import sys; vi=sys.version_info; print("%s.%s" %(vi.major, vi.minor))')

if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT-}" ] ; then
    _OLD_VIRTUAL_PS1="${PS1-}"
    if [ "xPVenv${PYTHON_VERSION}" != x ] ; then
        PS1="(PVenv${PYTHON_VERSION}) ${PS1-}"
    else
        PS1="(`basename \"$VIRTUAL_ENV\"`) ${PS1-}"
    fi
    export PS1
fi

# Make sure to unalias pydoc if it's already there
alias pydoc 2>/dev/null >/dev/null && unalias pydoc || true

pydoc () {
    python -m pydoc "$@"
}

# This should detect bash and zsh, which have a hash command that must
# be called to get it to forget past commands.  Without forgetting
# past commands the $PATH changes we made may not be respected
if [ -n "${BASH-}" ] || [ -n "${ZSH_VERSION-}" ] ; then
    hash -r 2>/dev/null
fi
